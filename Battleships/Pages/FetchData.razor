@page "/fetchdata"

@using Battleships.Data
@using Blazor.Extensions.Canvas
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions.Canvas.WebGL;
@using Battleships.Models;

@inject WeatherForecastService ForecastService

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*<table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>*@

    <button class="btn btn-primary" @onclick="Cyk">Click me</button>
    <BECanvas Width="500" Height="500" @ref="_canvasReference"></BECanvas>
}

@code {
    WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    private Canvas2DContext _context;

    public BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(this._context == null)
        {
            this._context = await this._canvasReference.CreateCanvas2DAsync();
            await this._context.SetFillStyleAsync("green");

            await this._context.FillRectAsync(0, 0, 300, 400);

            await this._context.SetFontAsync("48px serif");
            await this._context.StrokeTextAsync("Hello Blazor!!!", 10, 100);

            await DrawBoard(10, 10);
        }
    }

    private async Task DrawBoard(int gridWidth, int gridHeight)
    {
        var board = new Board(10, 10);
        await board.InitializeAsync(_canvasReference.Width, _canvasReference.Height);
        await board.DrawAsync(_context);

        //var cellWidth =  / gridWidth;
        //var cellHeight = _canvasReference.Height / gridHeight;

        //for(var col = 0; col < gridWidth; col++)
        //{
        //    for(var row = 0; row < gridHeight; row++)
        //    {
        //        await this._context.SetFillStyleAsync("red");
        //        await this._context.FillRectAsync(col * cellWidth, row * cellHeight, cellWidth, cellHeight);
        //    }
        //}


        //await this._context.SetFillStyleAsync("yellow");
        //await this._context.FillRectAsync(10, 100, 100, 100);
    }

    async Task Cyk()
    {
        await this._context.SetFillStyleAsync("yellow");
        await this._context.FillRectAsync(10, 100, 100, 100);
    }
}