@page "/fetchdata"

@using Battleships.Data
@using Blazor.Extensions.Canvas
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions.Canvas.WebGL;
@using Battleships.Models;
@using Battleships.Drawing;

@inject WeatherForecastService ForecastService
@inject IJSRuntime JsRuntime

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*<table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>*@

    <button class="btn btn-primary">Click me</button>

    <div style="width:@_widthStr; height:@_heightStr;" @onclick="Cyk">
        <BECanvas Width="_width" Height="_height" @ref="_canvasReference"></BECanvas>
    </div>
}

@code {
    int _width = 500;
    int _height = 500;
    string _widthStr => $"{_width}px";
    string _heightStr => $"{_height}px";

    WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    private Canvas2DContext _canvas;
    private BECanvasComponent _canvasReference;
    private DrawingContext _drawingContext;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (this._canvas == null)
        {
            this._canvas = await this._canvasReference.CreateCanvas2DAsync();
            _drawingContext = new DrawingContext(this._canvas, null);

            await DrawBoard(10, 10);
        }
    }

    private async Task DrawBoard(int gridWidth, int gridHeight)
    {
        var board = new Board(10, 10);
        await board.InitializeAsync(_canvasReference.Width, _canvasReference.Height);
        await board.DrawAsync(_drawingContext);
    }

    async Task Cyk(MouseEventArgs e)
    {
        var text = await JsRuntime.InvokeAsync<string>("xxx", "bbb");
        //await this._context.SetFillStyleAsync("yellow");
        //await this._context.FillRectAsync(10, 100, 100, 100);
    }
}