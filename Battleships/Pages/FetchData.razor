@page "/fetchdata"
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Battleships.Models;
@using Battleships.Drawing;
@using Battleships.CellStateStyleProviders;
@using Microsoft.AspNetCore.Components

@inject IJSRuntime JsRuntime
@inject IEnumerable<ICellStateStyleProvider> CellStateStyleProviders

<div style="width:@WidthStr; height:@HeightStr;" @onclick="OnCanvasClick" @ref="_divCanvasReference">
    <BECanvas Width="_width" Height="_height" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private int _width = 500;
    private int _height = 500;
    private string WidthStr => $"{_width}px";
    private string HeightStr => $"{_height}px";

    private Canvas2DContext _canvas;
    private BECanvasComponent _canvasReference;
    private ElementReference _divCanvasReference;
    private DrawingContext _drawingContext;
    
    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_canvas == null)
        {
            _canvas = await _canvasReference.CreateCanvas2DAsync(); //cannot be done in OnInitializedAsync because _canvasReference is null yet
            _drawingContext = new DrawingContext(_canvas, CellStateStyleProviders);

            await DrawBoard();
        }
    }

    private async Task DrawBoard()
    {
        var board = new Board(10, 10, _canvasReference.Width, _canvasReference.Height);
        await board.DrawAsync(_drawingContext);
    }

    private async Task OnCanvasClick(MouseEventArgs e)
    {
        var coordinatesStr = await JsRuntime.InvokeAsync<string>("getClickCoordinates", _divCanvasReference);
        var coordinatesArray = coordinatesStr
            .Split(new[] { '|' })
            .Select(int.Parse)
            .ToArray();

        var coordinates = new
        {
            x = e.ClientX - coordinatesArray[0],
            y = e.ClientY - coordinatesArray[1],
        };

        //TODO process click event...
    }
}