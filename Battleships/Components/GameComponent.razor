@using Battleships.Factories
@using Battleships.Models

@inject ShipFactory ShipFactory;
@inject IJSRuntime JsRuntime

<div @onclick="RestartGameAsync">Battleships (click to restart)</div>

<BoardComponent @ref="_playerBoardComponent" />
<BoardComponent @ref="_enemyBoardComponent" />

@code
{
    private BoardComponent _enemyBoardComponent;
    private BoardComponent _playerBoardComponent;

    private readonly IList<Ship> _enemyShips = new List<Ship>();
    private readonly IList<Ship> _playerShips = new List<Ship>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            InitializeGame();

            _enemyBoardComponent.AddOnClickListener(ProcessOnEnemyBoardClickAsync);
        }
    }

    private void InitializeGame()
    {
        _playerBoardComponent.Board.Clear();
        _enemyBoardComponent.Board.Clear();

        RandomizeShips(_playerShips, _playerBoardComponent.Board);
        RandomizeShips(_enemyShips, _enemyBoardComponent.Board);

        SetCellStatesOnPlayersBoard();
    }

    private void SetCellStatesOnPlayersBoard()
    {
        foreach (var playerShip in _playerShips)
        {
            foreach (var playerShipSegment in playerShip.Segments)
            {
                _playerBoardComponent.Board.SetCellState(playerShipSegment.X, playerShipSegment.Y, CellState.Ship);
            }
        }
    }

    private void RandomizeShips(ICollection<Ship> ships, Board board)
    {
        ships.Clear();

        var battleship = ShipFactory.CreateRandomShip(5, ships, board.Cols, board.Rows);
        ships.Add(battleship);
        var destroyer1 = ShipFactory.CreateRandomShip(4, ships, board.Cols, board.Rows);
        ships.Add(destroyer1);
        var destroyer2 = ShipFactory.CreateRandomShip(4, ships, board.Cols, board.Rows);
        ships.Add(destroyer2);
    }

    private async Task ProcessOnEnemyBoardClickAsync(int col, int row)
    {
        var cellState = _enemyBoardComponent.Board.GetCellState(col, row);

        if (cellState != CellState.Empty)
        {
            return;
        }

        var hitShip = _enemyShips.SingleOrDefault(ship => ship.Collides(col, row));
        if (hitShip != null)
        {
            hitShip.DamageSegment(col, row);
            _enemyBoardComponent.Board.SetCellState(col, row, CellState.Hit);
        }
        else
        {
            _enemyBoardComponent.Board.SetCellState(col, row, CellState.Mishit);
        }

        foreach (var enemyShip in _enemyShips)
        {
            if (enemyShip.IsDestroyed)
            {
                foreach (var segment in enemyShip.Segments)
                {
                    _enemyBoardComponent.Board.SetCellState(segment.X, segment.Y, CellState.Sunk);
                }
            }
        }

        if (_enemyShips.All(ship => ship.IsDestroyed))
        {
            await JsRuntime.InvokeAsync<string>("alert", "You won! Congratulations!");
            await RestartGameAsync();
        }

        await _enemyBoardComponent.RedrawAsync();
    }

    private async Task RestartGameAsync()
    {
        InitializeGame();

        await _playerBoardComponent.RedrawAsync();
        await _enemyBoardComponent.RedrawAsync();
    }
}
