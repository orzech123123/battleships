@using Battleships.Factories
@using Battleships.Mechanics
@using Battleships.Models

@inject ShipFactory ShipFactory;
@inject TurnProcessor TurnProcessor;

<div @onclick="RestartGameAsync">Battleships (click to restart)</div>

<BoardComponent @ref="_playerBoardComponent" />
<BoardComponent @ref="_enemyBoardComponent" />

@code
{
    private BoardComponent _enemyBoardComponent;
    private BoardComponent _playerBoardComponent;

    private readonly IList<Ship> _enemyShips = new List<Ship>();
    private readonly IList<Ship> _playerShips = new List<Ship>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            InitializeGame();

            _enemyBoardComponent.AddOnClickListener(ProcessOnEnemyBoardClickAsync);
        }
    }

    private void InitializeGame()
    {
        _playerBoardComponent.Board.Clear();
        _enemyBoardComponent.Board.Clear();

        RandomizeShips(_playerShips, _playerBoardComponent.Board);
        RandomizeShips(_enemyShips, _enemyBoardComponent.Board);

        SetCellStatesOnPlayersBoard();
    }

    private void SetCellStatesOnPlayersBoard()
    {
        foreach (var playerShip in _playerShips)
        {
            foreach (var playerShipSegment in playerShip.Segments)
            {
                _playerBoardComponent.Board.SetCellState(playerShipSegment.X, playerShipSegment.Y, CellState.Ship);
            }
        }
    }

    private void RandomizeShips(ICollection<Ship> ships, Board board)
    {
        ships.Clear();

        var battleship = ShipFactory.CreateRandomShip(5, ships, board.Cols, board.Rows);
        ships.Add(battleship);
        var destroyer1 = ShipFactory.CreateRandomShip(4, ships, board.Cols, board.Rows);
        ships.Add(destroyer1);
        var destroyer2 = ShipFactory.CreateRandomShip(4, ships, board.Cols, board.Rows);
        ships.Add(destroyer2);
    }

    private async Task ProcessOnEnemyBoardClickAsync(int col, int row)
    {
        var won = await ProcessTurnAsync(col, row, _enemyBoardComponent, _enemyShips, "You won! Congratulations!");
        if (won)
        {
            return;
        }

        var rnd = new Random(Guid.NewGuid().GetHashCode());
        await ProcessTurnAsync(rnd.Next(0, _playerBoardComponent.Board.Cols), rnd.Next(0, _playerBoardComponent.Board.Rows), _playerBoardComponent, _playerShips, "WASTED!");
    }

    private async Task<bool> ProcessTurnAsync(
        int col,
        int row,
        BoardComponent oponentBoardComponent,
        ICollection<Ship> oponentShips,
        string gameOverMessage)
    {
        var gameOver = await TurnProcessor.ProcessTurnAsync(col, row, oponentBoardComponent, oponentShips, gameOverMessage);

        if (gameOver)
        {
            await RestartGameAsync();
            return true;
        }

        return false;
    }

    private async Task RestartGameAsync()
    {
        InitializeGame();

        await _playerBoardComponent.RedrawAsync();
        await _enemyBoardComponent.RedrawAsync();
    }
}
