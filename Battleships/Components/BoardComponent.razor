@using Blazor.Extensions;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Battleships.Models;
@using Battleships.Drawing;
@using Battleships.CellStateStyleProviders;
@using Microsoft.AspNetCore.Components;
@using  System.Linq;

@inject IJSRuntime JsRuntime
@inject IEnumerable<ICellStateStyleProvider> CellStateStyleProviders

<div style="width:@WidthStr; height:@HeightStr; margin: 10px" @onclick="OnCanvasClick" @ref="_divCanvasReference">
    <BECanvas Width="_width" Height="_height" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private int _width = 500;
    private int _height = 500;
    private string WidthStr => $"{_width}px";
    private string HeightStr => $"{_height}px";

    private Canvas2DContext _canvas;
    private BECanvasComponent _canvasReference;
    private ElementReference _divCanvasReference;
    private DrawingContext _drawingContext;
    private Board _board;
    private readonly IList<Action<int, int>> _listeners = new List<Action<int, int>>();

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _canvas = await _canvasReference.CreateCanvas2DAsync(); //cannot be done in OnInitializedAsync because _canvasReference is null yet
            _drawingContext = new DrawingContext(_canvas, CellStateStyleProviders);
            
            _board = new Board(10, 10, (int)_canvasReference.Width, (int)_canvasReference.Height);

            await _board.DrawAsync(_drawingContext);
        }
    }

    public void AddOnClickListener(Action<int, int> listener)
    {
        _listeners.Add(listener);
    }

    public async Task Test()
    {
        _board.SetCellState(3, 3, CellState.Mishit);

        await _canvas.SetFillStyleAsync("white");
        await _canvas.FillRectAsync(0, 0, _width, _height);
        await _board.DrawAsync(_drawingContext);
    }

    private async Task OnCanvasClick(MouseEventArgs e)
    {
        var coordinatesStr = await JsRuntime.InvokeAsync<string>("getElementCoordinates", _divCanvasReference);
        var coordinatesArray = coordinatesStr
            .Split(new[] { '|' })
            .Select(int.Parse)
            .ToArray();

        var coordinates = new
        {
            x = e.ClientX - coordinatesArray[0],
            y = e.ClientY - coordinatesArray[1],
        };

        var gridCoordinates = new
        {
            x = (int)coordinates.x / _board.CellWidth,
            y = (int)coordinates.y / _board.CellHeight
        };

        foreach (var listener in _listeners)
        {
            listener(gridCoordinates.x, gridCoordinates.y);
        };
    }
}