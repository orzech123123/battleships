@using Blazor.Extensions;
@using Battleships.Models;
@using Battleships.Drawing;
@using Battleships.CellStateStyleProviders;
@using Microsoft.AspNetCore.Components;
@using System.Linq;
@using System.Threading

@inject IJSRuntime JsRuntime
@inject IEnumerable<ICellStateStyleProvider> CellStateStyleProviders

<div style="width:@WidthStr; height:@HeightStr; margin: 10px" @onclick="OnCanvasClickAsync" @ref="_divCanvasReference">
    <BECanvas Width="Width" Height="Height" @ref="_canvasReference"></BECanvas>
</div>

@code {
    public Board Board { get; private set; }

    private const int Width = 500;
    private const int Height = 500;
    private string WidthStr => $"{Width}px";
    private string HeightStr => $"{Height}px";

    private BECanvasComponent _canvasReference;
    private ElementReference _divCanvasReference;
    private DrawingContext _drawingContext;
    private readonly IList<Func<int, int, Task>> _listeners = new List<Func<int, int, Task>>();

    protected override async Task OnInitializedAsync()
    {
        Board = new Board(10, 10, Width, Height);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var canvas = await _canvasReference.CreateCanvas2DAsync(); //cannot be done in OnInitializedAsync because _canvasReference is null yet
            _drawingContext = new DrawingContext(canvas, CellStateStyleProviders);

            await Board.DrawAsync(_drawingContext);
        }
    }
    
    public async Task RedrawAsync()
    {
        await Board.DrawAsync(_drawingContext);
    }

    public void AddOnClickListener(Func<int, int, Task> listener)
    {
        _listeners.Add(listener);
    }

    private async Task OnCanvasClickAsync(MouseEventArgs e)
    {
        var coordinatesStr = await JsRuntime.InvokeAsync<string>("getElementCoordinates", _divCanvasReference);
        var coordinatesArray = coordinatesStr
            .Split(new[] { '|' })
            .Select(int.Parse)
            .ToArray();

        var coordinates = new
        {
            x = e.ClientX - coordinatesArray[0],
            y = e.ClientY - coordinatesArray[1],
        };

        var gridCoordinates = new
        {
            x = (int)coordinates.x / Board.CellWidth,
            y = (int)coordinates.y / Board.CellHeight
        };

        foreach (var listener in _listeners)
        {
            await listener(gridCoordinates.x, gridCoordinates.y);
        };
    }
}